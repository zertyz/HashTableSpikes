# Build this Spike with:
#	TYPE="Release"; rm -fr $TYPE; mkdir $TYPE; cd $TYPE; CXX=/usr/bin/clang++ cmake -G Ninja -DCMAKE_BUILD_TYPE=$TYPE ..; cmake --build .; cd ..; ls -l "$TYPE/HashTableSpikes"
# and run it with:
#	Release/HashTableSpikes
# Please, make sure the dependent libraries (listed bellow) were built with Release target.

cmake_minimum_required (VERSION 3.9)
project                (HashTableSpikes VERSION 2018.10.10)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS    "${CMAKE_CXX_FLAGS} -march=native -mcpu=native -mtune=native -fconstexpr-steps=1024000000")	# binary is optimized, but machine dependent


# GenerateConstExprData executable
##################################
set(SOURCE_FILES cpp/GenerateConstExprData.cpp)
message("Building auxiliary executable './${CMAKE_BUILD_TYPE}/GenerateConstExprData' with: ${SOURCE_FILES}")
add_executable(GenerateConstExprData ${SOURCE_FILES})

# HashTableSpikes executable
############################
#file(GLOB_RECURSE SOURCE_FILES  cpp/*.h cpp/*.cpp)
# the following files are generated by GenerateConstExprData.cpp
#	ConstexprRandomUniqueStdStringKeys.h    and  ConstexprRandomUniqueStdStringKeys.cpp
#	ConstexprRandomUniqueEastlStringKeys.h  and  ConstexprRandomUniqueEastlStringKeys.cpp
# To correctly generate them, use the command:
#	cd Release && ./GenerateConstExprData && mv -v *.h *.cpp ../cpp/ && cd ..
set(SOURCE_FILES cpp/ConstexprRandomUniqueStdStringKeys.cpp cpp/ConstexprRandomUniqueEastlStringKeys.cpp cpp/HashTableSpikes.cpp)
message("Building main executable './${CMAKE_BUILD_TYPE}/${PROJECT_NAME}' with: ${SOURCE_FILES}")
add_executable(${PROJECT_NAME} ${SOURCE_FILES})


# imported mutua libraries
##########################
# mutua libraries have the inclues inside the "cpp/" directory

# SplitRun dependency
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")

foreach (_referencedLib AlgorithmComplexityAndReentrancyAnalysis CppUtils SplitRun EventsFramework)
	set(_referencedLib_SOURCES "../../${_referencedLib}/cpp/")
	message("    --> searching library '${_referencedLib}' in '~/.cmake/packages/${_referencedLib}' with headers in '${_referencedLib_SOURCES}'")
	if (NOT TARGET ${_referencedLib})
		find_package(${_referencedLib} CONFIG REQUIRED)
		add_library (${_referencedLib} STATIC IMPORTED GLOBAL)
		message("        (built in '${${_referencedLib}_DIR}')")
	else()
		add_library(mutua::${_referencedLib} ALIAS ${_referencedLib})
		message("        (defined by the parent CMakeLists.txt)")
	endif()
	include_directories("${_referencedLib_SOURCES}")
	target_link_libraries(${PROJECT_NAME}       PRIVATE mutua::${_referencedLib})
	target_link_libraries(GenerateConstExprData PRIVATE mutua::${_referencedLib})
endforeach()


# EASTL library
###############
# don't forget to compile EASTL with "-march=native" as well
set(EASTL_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cpp/EASTL)
include_directories(${EASTL_ROOT_DIR}/include/)
include_directories(${EASTL_ROOT_DIR}/test/packages/EAAssert/include)
include_directories(${EASTL_ROOT_DIR}/test/packages/EABase/include/Common)
include_directories(${EASTL_ROOT_DIR}/test/packages/EAMain/include)
include_directories(${EASTL_ROOT_DIR}/test/packages/EAStdC/include)
include_directories(${EASTL_ROOT_DIR}/test/packages/EATest/include)
include_directories(${EASTL_ROOT_DIR}/test/packages/EAThread/include)
set(EASTL_LIBRARY debug ${EASTL_ROOT_DIR}/build/Debug/EASTL.lib optimized ${EASTL_ROOT_DIR}/Release/libEASTL.a)
add_custom_target(NatVis SOURCES ${EASTL_ROOT_DIR}/doc/EASTL.natvis)
target_link_libraries(${PROJECT_NAME}       PRIVATE ${EASTL_LIBRARY})
target_link_libraries(GenerateConstExprData PRIVATE ${EASTL_LIBRARY})

# Frozen library
################
include_directories(cpp/frozen/include/)

# libboost unit test framework
##############################
add_library          (boost_unit_test_framework STATIC     IMPORTED GLOBAL)
set_target_properties(boost_unit_test_framework PROPERTIES IMPORTED_LOCATION /usr/lib/libboost_unit_test_framework.a)
target_link_libraries(${PROJECT_NAME}                      PRIVATE boost_unit_test_framework)


add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME})
